---
const currentPath = Astro.url.pathname;

const caseStudyPages = [
  { title: 'Introduction', href: '/docs/introduction' },
  { title: 'Observability Overview', href: '/docs/observability-overview' },
  { title: 'Observability Landscape', href: '/docs/observability-landscape' },
  { title: 'Building Vispyr', href: '/docs/building-vispyr' },
  { title: 'Design Decisions', href: '/docs/design-decisions' },
  { title: 'Future Work', href: '/docs/future-work' }
];

const isInCaseStudy = currentPath.startsWith('/docs/');
---

<div popover="auto" id="drawer">
  <button class="overlay" popovertarget="drawer" popovertargetaction="hide"></button>
  <div class="drawer-content">
    <nav class="drawer-nav">
      <div class="nav-section">
        <a href="/" class="nav-link main-link" popovertarget="drawer" popovertargetaction="hide">
          <span>Home</span>
        </a>
        <a href="/docs/introduction" class="nav-link main-link" popovertarget="drawer" popovertargetaction="hide">
          <span>Case Study</span>
        </a>
        <a href="/#team" class="nav-link main-link" popovertarget="drawer" popovertargetaction="hide">
          <span>Team</span>
        </a>
      </div>

      <div class="nav-section">
        <h3 class="section-header">Case Study</h3>
        <div class="case-study-links">
          {caseStudyPages.map((page) => (
            <a 
              href={page.href} 
              class={`nav-link case-study-link ${currentPath === page.href ? 'active' : ''}`}
              popovertarget="drawer" 
              popovertargetaction="hide"
            >
              <span>{page.title}</span>
            </a>
          ))}
        </div>
      </div>
    </nav>
  </div>
</div>

<style>
  button {
    all: unset;
  }

  [popover] {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s ease;
    z-index: 1000;
    background: transparent;
    border: none;
    margin: 0;
    padding: 0;
  }

  [popover]::backdrop {
    background: rgba(0, 0, 0, 0.6);
  }

  [popover]:popover-open {
    opacity: 1;
    pointer-events: auto;
  }

  [popover]:popover-open .drawer-content {
    transform: translateX(0);
  }

  .overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: transparent;
    cursor: default;
  }

  .drawer-content {
    position: relative;
    width: 280px;
    max-width: 85vw;
    height: 100vh;
    background: #000;
    color: white;
    transform: translateX(-100%);
    transition: transform 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
    z-index: 1001;
  }

  .drawer-nav {
    height: 100%;
    display: flex;
    flex-direction: column;
    padding: 2rem 0;
    overflow-y: auto;
  }

  .drawer-nav::-webkit-scrollbar {
    display: none;
  }

  .drawer-nav {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .nav-section {
    padding: 0 1.5rem;
    margin-bottom: 2rem;
  }

  .nav-section:last-child {
    margin-bottom: 0;
  }

  .section-header {
    font-size: 0.875rem;
    font-weight: 600;
    color: #9ca3af;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin: 0 0 1rem 0;
    padding: 0 0.5rem;
  }

  .nav-link {
    display: flex;
    align-items: center;
    padding: 0.75rem 0.5rem;
    margin-bottom: 0.25rem;
    text-decoration: none;
    color: white;
    border-radius: 0.5rem;
    transition: background-color 0.2s ease;
    font-size: 1rem;
    line-height: 1.5;
    cursor: pointer;
  }

  .nav-link:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .main-link {
    font-weight: 500;
    font-size: 1.125rem;
    padding: 1rem 0.5rem;
  }

  .case-study-link {
    font-size: 0.9375rem;
    padding-left: 1rem;
  }

  .case-study-link.active {
    background: rgba(156, 163, 175, 0.2);
    color: white;
  }

  .case-study-link.active:hover {
    background: rgba(156, 163, 175, 0.3);
  }

  .case-study-links {
    display: flex;
    flex-direction: column;
  }

  @media (min-width: 768px) {
    [popover] {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const drawer = document.getElementById('drawer');
    
    if (!drawer) return;

    let scrollY = 0;
    let isHashNavigation = false;

    const freezeBody = () => {
      scrollY = window.scrollY;
      document.body.style.position = 'fixed';
      document.body.style.top = `-${scrollY}px`;
      document.body.style.width = '100%';
      document.body.style.overflow = 'hidden';
    };

    const unfreezeBody = () => {
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      document.body.style.overflow = '';
      
      if (!isHashNavigation) {
        window.scrollTo(0, scrollY);
      }
      isHashNavigation = false;
    };

    drawer.addEventListener('toggle', (e) => {
      const event = e as any;
      if (event.newState === 'open') {
        freezeBody();
      } else if (event.newState === 'closed') {
        unfreezeBody();
      }
    });

    drawer.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const link = target.closest('a[href*="#"]') as HTMLAnchorElement;
      if (link) {
        isHashNavigation = true;
        
        const href = link.getAttribute('href');
        if (href && href.includes('#')) {
          const [path, hash] = href.split('#');
          const currentPath = window.location.pathname;
          
          if (path && path !== currentPath) {
            drawer.hidePopover();
            return;
          }
          
          if (path === currentPath || href.startsWith('#')) {
            e.preventDefault();
            const targetElement = document.getElementById(hash);
            
            drawer.hidePopover();
            
            setTimeout(() => {
              if (targetElement) {
                targetElement.scrollIntoView({ behavior: 'smooth' });
              }
            }, 100);
          }
        }
      }
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && drawer.matches(':popover-open')) {
        drawer.hidePopover();
      }
    });

    const cleanupScroll = () => {
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      document.body.style.overflow = '';
    };

    window.addEventListener('beforeunload', cleanupScroll);
    document.addEventListener('visibilitychange', () => {
      if (!drawer.matches(':popover-open')) {
        cleanupScroll();
      }
    });
  });
</script>